using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace JASON_Compiler
{
    public class Node
    {
        public List<Node> Children = new List<Node>();
        
        public string Name;
        public Node(string N)
        {
            this.Name = N;
        }
    }
    public class Parser
    {
        int InputPointer = 0;
        List<Token> TokenStream;
        public  Node root;
        
        public Node StartParsing(List<Token> TokenStream)
        {
            this.InputPointer = 0;
            this.TokenStream = TokenStream;
            root = new Node("Program");
            root.Children.Add(Program());
            return root;
        }
        Node Program()
        {
            Node program = new Node("Program");
            program.Children.Add(FunctionHeader());
            //program.Children.Add(VarDecls());
            // program.Children.Add(DeclSec());
            // program.Children.Add(Block());
            //program.Children.Add(match(Token_Class.Dot));
            MessageBox.Show("Success");
            return program;
        }
        
        Node FunctionHeader()
        {
            Node header = new Node("Header");
            // write your code here to check the header sructure
            header.Children.Add(match(Token_Class.T_INT));
            //header.Children.Add(match(Token_Class.Idenifier));
            //header.Children.Add(match(Token_Class.Semicolon));
            return header;
        }
        /*
        Node VarDecl()
        {
            Node VarDecl = new Node("VarDecl");
            VarDecl.Children.Add(Datatype());
            VarDecl.Children.Add(Idlist());
            VarDecl.Children.Add(match(Token_Class.Semicolon));
            return VarDecl;
        }*/

        /*Node Datatype()
        {
            Node Datatype = new Node("Datatype");
            if (InputPointer < TokenStream.Count&&TokenStream[InputPointer].token_type == Token_Class.Integer ) {
                Datatype.Children.Add(match(Token_Class.Integer));
            }
            else if (InputPointer < TokenStream.Count && TokenStream[InputPointer].token_type == Token_Class.Real)
            {
                Datatype.Children.Add(match(Token_Class.Real));
            }
            else
            {   if (InputPointer < TokenStream.Count)
                {
                    Errors.Error_List.Add("Parsing Error: Expected integer or real "
                             + " and " +
                            TokenStream[InputPointer].token_type.ToString() +
                            "  found\r\n");
                    InputPointer++;
                }

            }
            return Datatype;
        }*/


        /*Node VarDecls()
        {
            Node VarDecls = new Node("VarDecls");
            VarDecls.Children.Add(VarDecl());
            VDecls(VarDecls);
            
            return VarDecls;
        }
        /*
         vardecls
                   vardecl
                   vardecl
         
         */

        /*
        void VDecls(Node VarDecls )
        {
            
            if (InputPointer < TokenStream.Count &&( TokenStream[InputPointer].token_type == Token_Class.Integer|| TokenStream[InputPointer].token_type == Token_Class.Real))
            {
                VarDecls.Children.Add(VarDecl());
                VDecls(VarDecls);
            }
           
        }
        */

        /*

        Node Idlist()
        {
            Node Idlist = new Node("Idlist");
            Idlist.Children.Add(match(Token_Class.Idenifier));
            IdenList(Idlist);
            return Idlist;
        }
        */
        
        /*
        void IdenList(Node Idlist)
        {

            if (InputPointer < TokenStream.Count && TokenStream[InputPointer].token_type == Token_Class.Comma)
            {
              
                Idlist.Children.Add(match(Token_Class.Comma));
                Idlist.Children.Add(match(Token_Class.Idenifier));
                IdenList(Idlist);
                
            }

        }*/

        /*
        Node DeclSec()
        {
            Node declsec = new Node("DeclSec");
            // write your code here to check atleast the declare sturcure 
            // without adding procedures
            return declsec;
        }
        Node Block()
        {
            Node block = new Node("block");
            // write your code here to match statements
            return block;
        }*/

        // Implement your logic here
        
        public Node match(Token_Class ExpectedToken)
        {

            if (InputPointer < TokenStream.Count)
            {
                if (ExpectedToken == TokenStream[InputPointer].token_type)
                {
                    InputPointer++;
                    Node newNode = new Node(ExpectedToken.ToString());

                    return newNode;

                }

                else
                {
                    Errors.Error_List.Add("Parsing Error: Expected "
                        + ExpectedToken.ToString() + " and " +
                        TokenStream[InputPointer].token_type.ToString() +
                        "  found\r\n");
                    InputPointer++;
                    return null;
                }
            }
            else
            {
                Errors.Error_List.Add("Parsing Error: Expected "
                        + ExpectedToken.ToString()  + "\r\n");
                InputPointer++;
                return null;
            }
        }

        public static TreeNode PrintParseTree(Node root)
        {
            TreeNode tree = new TreeNode("Parse Tree");
            TreeNode treeRoot = PrintTree(root);
            if (treeRoot != null)
                tree.Nodes.Add(treeRoot);
            return tree;
        }
        static TreeNode PrintTree(Node root)
        {
            if (root == null || root.Name == null)
                return null;
            TreeNode tree = new TreeNode(root.Name);
            if (root.Children.Count == 0)
                return tree;
            foreach (Node child in root.Children)
            {
                if (child == null)
                    continue;
                tree.Nodes.Add(PrintTree(child));
            }
            return tree;
        }
    }
}
